services:
  # InfluxDB for storing metrics
  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=
      - GF_LOG_LEVEL=info
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring
    depends_on:
      influxdb:
        condition: service_healthy
    restart: unless-stopped
    user: "472"

  # k6 Load Testing Engine
  k6:
    build:
      context: ./k6
    container_name: k6-engine
    networks:
      - monitoring
    volumes:
      - ./tests:/scripts
    environment:
      - K6_INFLUXDB_ORGANIZATION=${INFLUXDB_ORG}
      - K6_INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - K6_INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - K6_INFLUXDB_ADDR=http://influxdb:8086
    depends_on:
      influxdb:
        condition: service_healthy
    profiles:
      - testing

  # Test Results API
  test-api:
    build: ./api
    container_name: test-api
    ports:
      - "8080:8080"
    networks:
      - monitoring
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
    depends_on:
      influxdb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 10s
      timeout: 10s
      retries: 12
      start_period: 10s

networks:
  monitoring:
    driver: bridge

volumes:
  influxdb-data:
  influxdb-config:
  grafana-data: